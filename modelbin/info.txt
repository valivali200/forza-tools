HEADER:
    FILE-HEADER  4x char8      0x0--0x3
    4 bytes ?                  0x4--0x7
    DATA-OFFSET     uint32     0x8--0xB
    FILE-LENGTH     uint32     0xC--0xF
    N-ENTRIES       uint32     0x10-0x13
ENTRIES-LIST: 24 bytes each entry
    TYPE         4x char8
    4 bytes ?
    HEADER-OFFSET   uint32
    DATA-OFFSET     uint32
    DATA-SIZE       uint32
    DATA-SIZE       uint32
    
entry types:
    BreV/VerB - Vertex buffer
    BdnI/IndB - Face index buffer
    lekS/Skel - skeleton data
    hprM/Mrph - morph data(for characters)
    ltaM/Matl - Material (stored as a .materialbin (file in file))
    fuBM/MBuf - some kind of buffer
    yaLV/VLay - vertex layout?
    yaLI/ILay - index layout?
    ldoM/Modl - info about the entire model; 16 bytes; at the end of the file
    hseM/Mesh - submesh info i think?
    ... there are more
    
VerB/MBuf/IndB:
    uint32 entries
    uint32 datasize
    uint16 entry size
    uint16 values per entry / vertex layout index
    uint32 types to follow
    	0A000000 -?
    	0D000000 -?
    	25000000 -?
    	2A000000 -face indices uint32
    	39000000 -face indices uint16
    data ...
    
VLay:
    uint16 entries
    
    for each entry:
    	uint16 length
    	padding 2
    	char8[length] name
    
    uint16 data entries
    ... ?

entry headers:
    4 char8 'enaM'
    uint16 unk1
    uint16 unk2
    4 char8 type xoBB/  dI
    2 bytes ?
    uint16 name_len
    str[name_len-8]
    4 bytes padding
    
    
1 IndB per model
first VerB is position data for all vertices and it is stored in sint16 as x,y,z,?

Mesh:
    43 bytes?
    uint32 size of group

Modl: always 16 bytes and at the end of the file
    uint16 Mesh entries
    uint16 Buffer entries (IndB, VerB, MBuf)
    uint16 VLay entries
    uint16 Matl entries
    8 bytes ?
